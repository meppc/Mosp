import { Button, Slider, ComboBox, VerticalBox, HorizontalBox, GroupBox } from "std-widgets.slint";

component ToolButton inherits Rectangle {
    in property <string> tool-name;
    in property <bool> is-selected;
    callback clicked();
    
    width: 40px;
    height: 40px;
    border-radius: 4px;
    background: is-selected ? #3a7abd40 : #f0f0f0;
    
    Text {
        text: tool-name;
        color: is-selected ? #3a7abd : #000000;
        font-size: 14px;
        horizontal-alignment: center;
        vertical-alignment: center;
    }
    
    TouchArea {
        clicked => {
            root.clicked();
        }
    }
}

component DrawingCanvas inherits Rectangle {
    in property <float> stroke-width;
    in property <color> stroke-color;
    callback pointer-pressed(float, float);
    callback pointer-moved(float, float);
    callback pointer-released(float, float);
    
    background: white;
    border-width: 1px;
    border-color: #cccccc;
    
    TouchArea {
        mouse-cursor: pointer;
        width: parent.width;
        height: parent.height;
        
        clicked => {
            root.pointer-pressed(self.mouse-x / 1px, self.mouse-y / 1px);
        }
        moved => {
            root.pointer-moved(self.mouse-x / 1px, self.mouse-y / 1px);
        }
    }
}

export component MainWindow inherits Window {
    in-out property <bool> is-drawing: false;
    in-out property <string> current-tool: "pen";
    in-out property <color> current-color: #000000;
    in-out property <float> current-brush-size: 1.0;
    
    callback tool-changed(string);
    callback color-changed(color);
    callback brush-size-changed(float);
    
    title: "Mosp";
    background: white;
    min-width: 800px;
    min-height: 600px;
    
    HorizontalLayout {
        padding: 8px;
        spacing: 8px;
        
        // Toolbar
        VerticalLayout {
            spacing: 8px;
            width: 48px;
            
            ToolButton {
                tool-name: "pen";
                is-selected: root.current-tool == self.tool-name;
                clicked => {
                    root.current-tool = self.tool-name;
                    root.tool-changed(self.tool-name);
                }
            }
            
            ToolButton {
                tool-name: "eraser";
                is-selected: root.current-tool == self.tool-name;
                clicked => {
                    root.current-tool = self.tool-name;
                    root.tool-changed(self.tool-name);
                }
            }
            
            Rectangle {
                width: 40px;
                height: 40px;
                background: root.current-color;
                border-radius: 4px;
                border-width: 1px;
                border-color: #cccccc;
                
                TouchArea {
                    clicked => {
                        // TODO: Show color picker dialog
                    }
                }
            }
            
            Rectangle {
                height: 1px;
                background: #cccccc;
            }
            
            Slider {
                width: 40px;
                minimum: 1;
                maximum: 50;
                value: root.current-brush-size;
                changed(value) => {
                    root.current-brush-size = value;
                    root.brush-size-changed(value);
                }
            }
        }
        
        // Canvas
        DrawingCanvas {
            stroke-width: root.current-brush-size;
            stroke-color: root.current-color;
            pointer-pressed(x, y) => {
                root.is-drawing = true;
            }
            pointer-moved(x, y) => {
                if (root.is-drawing) {
                    // Drawing logic will be handled in Rust
                }
            }
            pointer-released(x, y) => {
                root.is-drawing = false;
            }
        }
    }
}